[
  {
    "Id": "901780",
    "ThreadId": "392421",
    "Html": "\r\n<p><strong><span>Looking forward to do better 希望提高改进一下性能<br>\r\n<br>\r\nv2.2 <strong>FluentData &nbsp;</strong><br>\r\n<br>\r\nExecuting scenario:&nbsp;</span><strong>FetchSingleEntity&nbsp;</strong><br>\r\n<span>-----------------------------------</span><br>\r\n<span>Massive doesn't support the action. not explicit type support</span><br>\r\n<span>Dapper entity - 500 iterations executed in 76,5396 ms</span><br>\r\n<span>SqlFu Get - 500 iterations executed in 77,6155 ms</span><br>\r\n<span>PetaPoco entity - 500 iterations executed in 78,8191 ms</span><br>\r\n<span>SqlFu FirstOrDefault - 500 iterations executed in 80,1971 ms</span><br>\r\n<span>OrmLite - 500 iterations executed in 80,2547 ms</span><br>\r\n<span>InsightDatabase - 500 iterations executed in 160,2398 ms</span><br>\r\n<span>FluentData - 500 iterations executed in 206,3038 ms</span><br>\r\n<br>\r\n<span>Executing scenario:&nbsp;</span><strong>FetchSingleDynamicEntity</strong><br>\r\n<span>-----------------------------------</span><br>\r\n<span>SqlFu dynamic - 500 iterations executed in 74,6951 ms</span><br>\r\n<span>Dapper dynamic - 500 iterations executed in 80,3824 ms</span><br>\r\n<span>PetaPoco dynamic - 500 iterations executed in 83,6375 ms</span><br>\r\n<span>Massive - 500 iterations executed in 130,8806 ms</span><br>\r\n<span>OrmLite - 500 iterations executed in 146,8522 ms</span><br>\r\n<span>InsightDatabase - 500 iterations executed in 176,2635 ms</span><br>\r\n<span>FluentData - 500 iterations executed in 280,377 ms</span><br>\r\n<br>\r\n<span>Executing scenario:&nbsp;</span><strong>QueryTop10</strong><br>\r\n<span>-----------------------------------</span><br>\r\n<span>Massive doesn't support the action. not explicit type support</span><br>\r\n<span>SqlFu - 500 iterations executed in 90,7809 ms</span><br>\r\n<span>PetaPoco - 500 iterations executed in 106,1067 ms</span><br>\r\n<span>Dapper&nbsp; - 500 iterations executed in 115,7401 ms</span><br>\r\n<span>OrmLite - 500 iterations executed in 128,891 ms</span><br>\r\n<span>InsightDatabase - 500 iterations executed in 203,417 ms</span><br>\r\n<span>FluentData - 500 iterations executed in 445,0844 ms</span><br>\r\n<br>\r\n<br>\r\n<span>Executing scenario:&nbsp;</span><strong>QueryTop10Dynamic</strong><br>\r\n<span>-----------------------------------</span><br>\r\n<span>Dapper&nbsp; - 500 iterations executed in 99,1737 ms</span><br>\r\n<span>OrmLite - 500 iterations executed in 108,785 ms</span><br>\r\n<span>Massive - 500 iterations executed in 116,3599 ms</span><br>\r\n<span>SqlFu - 500 iterations executed in 116,4271 ms</span><br>\r\n<span>PetaPoco dynamic - 500 iterations executed in 125,1672 ms</span><br>\r\n<span>InsightDatabase - 500 iterations executed in 192,129 ms</span><br>\r\n<span>FluentData - 500 iterations executed in 198,8402 ms&nbsp;</span><br>\r\n<br>\r\n<span>Executing scenario:&nbsp;</span><strong>PagedQuery_Skip0_Take10</strong><br>\r\n<span>-----------------------------------</span><br>\r\n<span>Dapper&nbsp; doesn't support the action. No implicit pagination support</span><br>\r\n<span>FluentData doesn't support the action. No implicit pagination support</span><br>\r\n<span>OrmLite doesn't support the action. No implicit pagination support</span><br>\r\n<span>InsightDatabase doesn't support the action. No implicit pagination support</span><br>\r\n<span>Massive - 500 iterations executed in 115,4747 ms</span><br>\r\n<span>SqlFu - 500 iterations executed in 199,1776 ms</span><br>\r\n<span>PetaPoco - 500 iterations executed in 292,4833 ms&nbsp;</span><br>\r\n<br>\r\n<span>Executing scenario:&nbsp;</span><strong>ExecuteScalar</strong><br>\r\n<span>-----------------------------------</span><br>\r\n<span>OrmLite - 500 iterations executed in 59,7584 ms</span><br>\r\n<span>InsightDatabase - 500 iterations executed in 64,2303 ms</span><br>\r\n<span>PetaPoco int - 500 iterations executed in 66,3844 ms</span><br>\r\n<span>SqlFu scalar int - 500 iterations executed in 77,7015 ms</span><br>\r\n<span>Dapper scalar int - 500 iterations executed in 83,0212 ms</span><br>\r\n<span>Massive - 500 iterations executed in 130,4026 ms</span><br>\r\n<span>FluentData - 500 iterations executed in 157,6623 ms</span><br>\r\n<br>\r\n<span>Executing scenario:&nbsp;</span><strong>MultiPocoMapping</strong><br>\r\n<span>-----------------------------------</span><br>\r\n<span>Massive doesn't support the action. Specified method is not supported.</span><br>\r\n<span>OrmLite doesn't support the action. Suports only its own specific source format</span><br>\r\n<span>InsightDatabase doesn't support the action. No implicit multi mapping support</span><br>\r\n<span>SqlFu - 500 iterations executed in 75,7716 ms</span><br>\r\n<span>Dapper&nbsp; - 500 iterations executed in 88,3029 ms</span><br>\r\n<span>PetaPoco - 500 iterations executed in 99,3068 ms</span><br>\r\n<span>FluentData - 500 iterations executed in 236,9429 ms</span><br>\r\n<br>\r\n<span>Executing scenario:&nbsp;</span><strong>Inserts</strong><br>\r\n<span>-----------------------------------</span><br>\r\n<span>Massive doesn't support the action. Couldn't figure how to insert pocos with auto increment id</span><br>\r\n<span>FluentData doesn't support the action. Specified method is not supported.</span><br>\r\n<span>InsightDatabase doesn't support the action. Specified method is not supported.</span><br>\r\n<span>SqlFu - 500 iterations executed in 112,067 ms</span><br>\r\n<span>PetaPoco - 500 iterations executed in 126,0432 ms</span><br>\r\n<span>OrmLite - 500 iterations executed in 128,8205 ms</span><br>\r\n<span>Dapper - 500 iterations executed in 264,1543 ms&nbsp;</span><br>\r\n<br>\r\n<span>Executing scenario:&nbsp;</span><strong>Updates</strong><br>\r\n<span>-----------------------------------</span><br>\r\n<span>InsightDatabase doesn't support the action. Specified method is not supported.</span><br>\r\n<span>SqlFu - 500 iterations executed in 75,1604 ms</span><br>\r\n<span>PetaPoco - 500 iterations executed in 80,522 ms</span><br>\r\n<span>Dapper&nbsp; - 500 iterations executed in 102,6581 ms</span><br>\r\n<span>OrmLite - 500 iterations executed in 195,2351 ms</span><br>\r\n<span>massive - 500 iterations executed in 202,5537 ms</span><br>\r\n<span>FluentData - 500 iterations executed in 249,3975 ms&nbsp;</span><br>\r\n</strong></p>\r\n",
    "PostedDate": "2012-08-20T22:19:11.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "901819",
    "ThreadId": "392421",
    "Html": "<p>I'm aware of the result and the related blog post. My comments are:</p>\r\n<p>1) The result you pasted are comparing pears with apples. For the other ORMs but FluentData a shared connection is opened before all the tests are executed, and this connection is never closed. While for FluentData the connection is opened and closed during each run. For 99,9% of the applications the best is to open the connection just before the query is executed and close it just after (unless you are doing bulk execution like the tests you pasted are doing - which 99.9% of the applications does not), and this is what FluentData does for you. And the reason for this is that its more critical to have connections that are never closed than to save some milliseconds. Anyways FluentData now supports UseSharedConnection where you can basically decide when to open it and when to close it. If the tests used this feature then the performance would be better.</p>\r\n<p>2) Since the launch I have been transparent about the road map of FluentData. The first phases have focused on implementing the most important features that I think a framework like FluentData should have but with less focus on performance. Currently there is 1 feature left in this phase. In the next phase I will focus strictly on performance optimization. You can see the road map here:&nbsp;<a href=\"https://trello.com/board/fluentdata/4e9e67b519c2820000029f57\">https://trello.com/board/fluentdata/4e9e67b519c2820000029f57</a>.</p>\r\n<p>3) FluentData has a easier to use and a more flexible API than the other frameworks, and it also has a better auto mapping support. This makes it easier to work with but it creates a small overhead.&nbsp;</p>\r\n<p>4) I have received a lot of feedback on FluentData through e-mail, and I'm yet to receive one concerning poor performance. There is a saying \"<span>premature optimization is the root of all evil\". &nbsp;The result shows a big gap between some ORMS and Fluent Data (but less when you use the UseSharedConnection feature), but does some tiny milliseconds matter in an average application (the result is for 500 executed queries)? In 99.9% of the cases it does not. And for every application that I have worked with any performance issue has been strictly due to poor SQL and not due to the framework.</span></p>\r\n<p>5) In order to improve the performance to get close to for instance Dapper then I need to implement IL Emit where you create and cache methods on the fly. This will make the source code of Fluent Data more complex and it will be unreadable and unmaintanable for 99.9% of the developers. I have not yet decided if I want to take that route. You can see some examples on IL Emit at the bottom of this page:&nbsp;<a href=\"http://msdn.microsoft.com/en-us/library/system.reflection.emit.ilgenerator(v=vs.95).aspx\">http://msdn.microsoft.com/en-us/library/system.reflection.emit.ilgenerator(v=vs.95).aspx</a></p>\r\n<p>&nbsp;</p>\r\n<p>Any comments?</p>",
    "PostedDate": "2012-08-21T01:27:46.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "901834",
    "ThreadId": "392421",
    "Html": "<p>Thank you for your reply<br />very good ，I am very interested in that !<br /><br /></p>",
    "PostedDate": "2012-08-21T01:56:35.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1081826",
    "ThreadId": "392421",
    "Html": "I would keep it how you have it and not go the IL Emit route.  People use Fluent because it's easy to use and I would stick to this goal.  Milliseconds don't matter for most applications.  Comparing FluentData performance to EF or NHibernate is what really matters.<br />\n",
    "PostedDate": "2013-08-18T06:20:16.883-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]