[
  {
    "Id": "957571",
    "ThreadId": "407145",
    "Html": "\r\n<p>Please try the following code</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Action&lt;<span style=\"color:blue\">object</span>, <span style=\"color:blue\">object</span>[]&gt; CreatePropertiesAction(PropertyInfo[] infos)\r\n        {\r\n            Type classType = GetClassTypeByProperty(infos);\r\n            DynamicMethod method = <span style=\"color:blue\">new</span> DynamicMethod(<span style=\"color:#a31515\">&quot;&quot;</span>, <span style=\"color:blue\">null</span>, <span style=\"color:blue\">new</span> Type[] { <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">object</span>), <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">object</span>[]) }, <span style=\"color:blue\">true</span>);\r\n            ILGenerator il = method.GetILGenerator();\r\n\r\n            LocalBuilder obj = il.DeclareLocal(classType);\r\n            il.Emit(OpCodes.Ldarg_0);\r\n            il.Emit(OpCodes.Unbox_Any, classType); <span style=\"color:green\">//��Ҫ��ֵ�Ķ�����в���</span>\r\n            il.Emit(OpCodes.Stloc_0); \r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; infos.Length; i&#43;&#43;)\r\n            {\r\n                Label lbl_end = il.DefineLabel();\r\n                Type propType = infos[i].PropertyType;\r\n\r\n                il.Emit(OpCodes.Ldarg_1);\r\n                Ldc(il, i);\r\n                il.Emit(OpCodes.Ldelem_Ref); <span style=\"color:green\">//��λi����value</span>\r\n\r\n                il.Emit(OpCodes.Ldnull);\r\n                il.Emit(OpCodes.Ceq);\r\n                il.Emit(OpCodes.Brtrue_S, lbl_end); <span style=\"color:green\">//�ж��Ƿ�Ϊnull��Ϊnull������</span>\r\n\r\n                il.Emit(OpCodes.Ldloc_0); <span style=\"color:green\">//����ѹջ</span>\r\n                il.Emit(OpCodes.Ldarg_1); <span style=\"color:green\">//ֵ����ѹջ</span>\r\n                Ldc(il, i);               <span style=\"color:green\">//ѹ������</span>\r\n                il.Emit(OpCodes.Ldelem_Ref); <span style=\"color:green\">//ȡ��������ֵ</span>\r\n                il.Emit(OpCodes.Unbox_Any, propType); <span style=\"color:green\">//����</span>\r\n\r\n                il.Emit(OpCodes.Callvirt, infos[i].GetSetMethod()); <span style=\"color:green\">//�������Ե�set���������Ը�ֵ</span>\r\n                il.MarkLabel(lbl_end);\r\n            }\r\n\r\n            il.Emit(OpCodes.Ret);\r\n            <span style=\"color:blue\">return</span> method.CreateDelegate(<span style=\"color:blue\">typeof</span>(Action&lt;<span style=\"color:blue\">object</span>, <span style=\"color:blue\">object</span>[]&gt;)) <span style=\"color:blue\">as</span> Action&lt;<span style=\"color:blue\">object</span>, <span style=\"color:blue\">object</span>[]&gt;;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;<span style=\"color:blue\">object</span>, <span style=\"color:blue\">object</span>[]&gt; CreatePropertiesFunc(PropertyInfo[] infos)\r\n        {\r\n            Type classType = GetClassTypeByProperty(infos);\r\n            DynamicMethod method = <span style=\"color:blue\">new</span> DynamicMethod(<span style=\"color:#a31515\">&quot;&quot;</span>, <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">object</span>[]), <span style=\"color:blue\">new</span> Type[] { <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">object</span>) }, <span style=\"color:blue\">true</span>);\r\n            ILGenerator il = method.GetILGenerator();\r\n\r\n            LocalBuilder tmp = il.DeclareLocal(<span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">object</span>));\r\n            LocalBuilder result = il.DeclareLocal(<span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">object</span>[]));\r\n\r\n            LocalBuilder obj = il.DeclareLocal(classType);\r\n            il.Emit(OpCodes.Ldarg_0);\r\n            il.Emit(OpCodes.Unbox_Any, classType);\r\n            il.Emit(OpCodes.Stloc, obj);\r\n\r\n            Ldc(il, infos.Length);\r\n            il.Emit(OpCodes.Newarr, <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">object</span>));\r\n            il.Emit(OpCodes.Stloc, result); <span style=\"color:green\">//��ʼ��һ��object����</span>\r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; infos.Length; i&#43;&#43;)\r\n            {\r\n                il.Emit(OpCodes.Ldloc, obj);\r\n                il.Emit(OpCodes.Callvirt, infos[i].GetGetMethod()); <span style=\"color:green\">//��ȡ���Ե�ֵ</span>\r\n\r\n                <span style=\"color:blue\">if</span> (infos[i].PropertyType.IsValueType)\r\n                    il.Emit(OpCodes.Box, infos[i].PropertyType); <span style=\"color:green\">//ֵ������װ��</span>\r\n\r\n                il.Emit(OpCodes.Stloc, tmp); <span style=\"color:green\">//���浽��ʱ����</span>\r\n\r\n                il.Emit(OpCodes.Ldloc, result);\r\n                Ldc(il, i);\r\n                il.Emit(OpCodes.Ldloc, tmp); <span style=\"color:green\">//�����������λ�á�ֵ�ֱ�ѹջ</span>\r\n                il.Emit(OpCodes.Stelem_Ref); <span style=\"color:green\">//��ֵ</span>\r\n            }\r\n\r\n            il.Emit(OpCodes.Ldloc, result);\r\n            il.Emit(OpCodes.Ret);\r\n\r\n            <span style=\"color:blue\">return</span> method.CreateDelegate(<span style=\"color:blue\">typeof</span>(Func&lt;<span style=\"color:blue\">object</span>, <span style=\"color:blue\">object</span>[]&gt;)) <span style=\"color:blue\">as</span> Func&lt;<span style=\"color:blue\">object</span>, <span style=\"color:blue\">object</span>[]&gt;;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> Type GetClassTypeByProperty(PropertyInfo[] infos)\r\n        {\r\n            <span style=\"color:blue\">if</span> (infos == <span style=\"color:blue\">null</span> || infos.Length &lt;= 0)\r\n                <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentNullException(<span style=\"color:#a31515\">&quot;infos&quot;</span>);\r\n\r\n            <span style=\"color:blue\">return</span> infos[0].ReflectedType;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Ldc(ILGenerator il, <span style=\"color:blue\">int</span> value)\r\n        {\r\n            <span style=\"color:blue\">switch</span> (value)\r\n            {\r\n                <span style=\"color:blue\">case</span> -1:\r\n                    il.Emit(OpCodes.Ldc_I4_M1);\r\n                    <span style=\"color:blue\">return</span>;\r\n                <span style=\"color:blue\">case</span> 0:\r\n                    il.Emit(OpCodes.Ldc_I4_0);\r\n                    <span style=\"color:blue\">return</span>;\r\n                <span style=\"color:blue\">case</span> 1:\r\n                    il.Emit(OpCodes.Ldc_I4_1);\r\n                    <span style=\"color:blue\">return</span>;\r\n                <span style=\"color:blue\">case</span> 2:\r\n                    il.Emit(OpCodes.Ldc_I4_2);\r\n                    <span style=\"color:blue\">return</span>;\r\n                <span style=\"color:blue\">case</span> 3:\r\n                    il.Emit(OpCodes.Ldc_I4_3);\r\n                    <span style=\"color:blue\">return</span>;\r\n                <span style=\"color:blue\">case</span> 4:\r\n                    il.Emit(OpCodes.Ldc_I4_4);\r\n                    <span style=\"color:blue\">return</span>;\r\n                <span style=\"color:blue\">case</span> 5:\r\n                    il.Emit(OpCodes.Ldc_I4_5);\r\n                    <span style=\"color:blue\">return</span>;\r\n                <span style=\"color:blue\">case</span> 6:\r\n                    il.Emit(OpCodes.Ldc_I4_6);\r\n                    <span style=\"color:blue\">return</span>;\r\n                <span style=\"color:blue\">case</span> 7:\r\n                    il.Emit(OpCodes.Ldc_I4_7);\r\n                    <span style=\"color:blue\">return</span>;\r\n                <span style=\"color:blue\">case</span> 8:\r\n                    il.Emit(OpCodes.Ldc_I4_8);\r\n                    <span style=\"color:blue\">return</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (value &gt; -129 && value &lt; 128)\r\n                il.Emit(OpCodes.Ldc_I4_S, (<span style=\"color:blue\">sbyte</span>)value);\r\n            <span style=\"color:blue\">else</span>\r\n                il.Emit(OpCodes.Ldc_I4, value);\r\n        }\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2012-12-18T04:47:29.757-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "981797",
    "ThreadId": "407145",
    "Html": "\r\n<p>Thank you for your post. Your code uses IL Emit which is used by many frameworks as it gives good performance (don't get the overhead of reflection). However is has a big downside, it's unreadable and unmaintainable for 99.9% of the developers out there.\r\n Due to this I decided not to add any such code. However are you having performance issues? If so then I will consider it.</p>\r\n<p>&nbsp;</p>\r\n<p>Regards,</p>\r\n<p>Lars-Erik</p>\r\n",
    "PostedDate": "2012-12-30T09:17:28.043-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]